import { useEffect, useState } from "react";



const Attendee = ({ errors,verifiedEmail, attendee, index, handleChange, handleRemoveAttendee }) => {
  const [emailErrors, setEmailErrors] = useState(false);
  const [phoneErrors, setPhoneErrors] = useState(false);
  const [nameErrors, setNameErrors] = useState(false);
  const [idErrors, setIDErrors] = useState(false);
  const [ageErrors, setAgeErrors] = useState(false);

  // const verifiedEmail = JSON.parse(localStorage.getItem('verifiedEmail'));
  //     console.log(verifiedEmail);

  useEffect(()=>{

   
    
    if(attendee){
      if(attendee.email.trim() === ''){
        setEmailErrors(false);
      }else{
        setEmailErrors(true);
        setPhoneErrors(true);
        setAgeErrors(true);
        setIDErrors(true);
        setNameErrors(true);

      }    
      if(attendee.contact.trim() === ''){
        setPhoneErrors(false);
      }else{
        setPhoneErrors(true);

      }    
    }
  },[attendee]);


  useEffect(()=>{

    if(index===0 && verifiedEmail){
      setEmailErrors(true);
    }else{
      setEmailErrors(false);
    }
  },[verifiedEmail,index]);

  const validateNAMEInput = (e)=>{
    const value  = e.target.value;
    if(!value.trim()){
      setNameErrors(false)
    } else{
      setNameErrors(true)
    }
  }
  const validateAgeInput = (e)=>{
    const value  = e.target.value;
    if(!value.trim()){
      setAgeErrors(false)
    } else{
      setAgeErrors(true)
    }
  }
  const validateIDInput = (e)=>{
    const value  = e.target.value;
    if(!value.trim()){
      setIDErrors(false)
    } else{
      setIDErrors(true)
    }
  }
  

   
  
  const validateEmailInput = (e) => {
    const  value  = e.target.value;


    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    const updatedErrors = emailRegex.test(value);
    setEmailErrors(updatedErrors);
  };

  const validatePhoneInput = (e) => {
    const value = e.target.value;
    const phoneRegex = /^[0-9]{10}$/;
    const updatedErrors = phoneRegex.test(value);
    setPhoneErrors(updatedErrors);
  };
  

  
  return (
    <>
      <div className="form-container">
        <div className="formpass">
          <div className="formheadcontainer">
            {index ===0 ? (<h1 className="formheading">Primary Attendee</h1>) : (<h1 className="formheading">Attendee {index+1}</h1>)}
          </div>
          <div>
            <select
              className="formpassSelect"
              id={`pass_type_${index}`}
              name="passType"
              value={attendee.passType}
              onChange={(e) => handleChange(e, index)}
              readOnly
            >
              <option value="Normal">
                Normal Season Card
                </option>
            </select>
          </div>
          {index !== 0 && (
            <div>
              <button
                type="button"
                onClick={() => handleRemoveAttendee(index)}
                className="remove-attendee-button"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="6"
                  viewBox="0 0 20 6"
                  fill="none"
                >
                  <path d="M0 5.5V0.5H20V5.5H0Z" fill="#DB5356" />
                </svg>
                Remove Attendee
              </button>
            </div>
          )}
        </div>
        <div className="bigcontainer">
        <div className="containerbox">
          <div className="form-group ">
            <div>
              <label htmlFor={`name_${index}`}>Full Name:</label>
            </div>
            <div >
              <input
                type="text"
                id={`name_${index}`}
                name="name"
                value={attendee.name}
                onInput={(e)=>{validateNAMEInput(e)}}
                onChange={(e) => handleChange(e, index)}
                placeholder="Enter your Full Name"
              />
              {errors.name && !nameErrors && (<div className='Errors'>
						<h1>{errors.name}</h1>
                     </div>)}
            </div>
          </div>

          <div className="form-group emailfield">
            <div>
              <label style={{ color: emailErrors ? 'green' : 'red' }} htmlFor={`email_${index}`}>Email:</label>
            </div>
            <div className=" input-wrapper ">
              {index ===0 ? (<input
                autoComplete="off"
                style={{ border: emailErrors ? '1px solid green' : '1px solid red' }}
                type="email"
                id={`email_${index}`}
                name="email"
                value={verifiedEmail}
                onInput={(e)=>validateEmailInput(e)}
                onChange={(e) => {handleChange(e, index); }}
                placeholder="Enter Email ID"
                readOnly
              />):(
                <div>
                <input
                autoComplete="off"
                style={{ border: emailErrors ? '1px solid green' : '1px solid red' }}
                type="email"
                id={`email_${index}`}
                name="email"
                value={attendee.email}
                onInput={(e)=>validateEmailInput(e)}
                onChange={(e) => {handleChange(e, index); }}
                placeholder="Enter Email ID"
              />{errors.email && !emailErrors && (<div className='Errors'>
                <h1>{errors.email}</h1>
                         </div>)}
              </div>
              
              )}
              
              {emailErrors ? (
                      <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 33 31" fill="none">
                       <path d="M14.8771 16.5599L12.6358 14.4022C12.3525 14.1246 11.9985 13.9858 11.574 13.9858C11.1494 13.9858 10.7821 14.1372 10.4719 14.4401C10.1885 14.7177 10.0468 15.071 10.0468 15.5C10.0468 15.929 10.1885 16.2823 10.4719 16.5599L13.7951 19.8155C14.1042 20.1183 14.4649 20.2698 14.8771 20.2698C15.2892 20.2698 15.6499 20.1183 15.959 19.8155L22.5281 13.3801C22.8372 13.0773 22.9851 12.7239 22.9717 12.3202C22.9583 11.9164 22.8104 11.5631 22.5281 11.2602C22.219 10.9574 21.8521 10.7999 21.4276 10.7878C21.003 10.7757 20.6357 10.9205 20.3255 11.2224L14.8771 16.5599ZM10.5492 30.2635L8.30796 26.5537L4.05738 25.6452C3.67096 25.5695 3.36183 25.3742 3.12998 25.0592C2.89813 24.7442 2.80796 24.397 2.85948 24.0174L3.28454 19.7398L0.386417 16.4842C0.128806 16.2066 0 15.8786 0 15.5C0 15.1214 0.128806 14.7934 0.386417 14.5158L3.28454 11.2602L2.85948 6.98257C2.80796 6.60402 2.89813 6.25676 3.12998 5.9408C3.36183 5.62483 3.67096 5.4295 4.05738 5.3548L8.30796 4.44627L10.5492 0.736462C10.7553 0.408383 11.0386 0.187309 11.3993 0.0732384C11.76 -0.040832 12.1206 -0.0216521 12.4813 0.130778L16.5 1.79641L20.5187 0.130778C20.8794 -0.0206426 21.24 -0.0398225 21.6007 0.0732384C21.9614 0.186299 22.2447 0.407374 22.4508 0.736462L24.692 4.44627L28.9426 5.3548C29.329 5.43051 29.6382 5.62635 29.87 5.94231C30.1019 6.25828 30.192 6.60503 30.1405 6.98257L29.7155 11.2602L32.6136 14.5158C32.8712 14.7934 33 15.1214 33 15.5C33 15.8786 32.8712 16.2066 32.6136 16.4842L29.7155 19.7398L30.1405 24.0174C30.192 24.396 30.1019 24.7432 29.87 25.0592C29.6382 25.3752 29.329 25.5705 28.9426 25.6452L24.692 26.5537L22.4508 30.2635C22.2447 30.5916 21.9614 30.8127 21.6007 30.9268C21.24 31.0408 20.8794 31.0217 20.5187 30.8692L16.5 29.2036L12.4813 30.8692C12.1206 31.0206 11.76 31.0398 11.3993 30.9268C11.0386 30.8137 10.7553 30.5926 10.5492 30.2635Z" fill="#39A279"/>
                         </svg>
                    ) : (
                      <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none">
                      <path d="M12.028 0.97447C12.8896 0.341402 13.9308 0 15 0C16.0692 0 17.1104 0.341402 17.972 0.97447L19.7121 2.2496C19.999 2.4615 20.3309 2.59839 20.6834 2.65277L22.8172 2.98093C23.8734 3.14288 24.8503 3.63754 25.6061 4.39297C26.3618 5.1484 26.8568 6.12521 27.0193 7.18137L27.3474 9.31534C27.4018 9.666 27.5387 9.99979 27.7505 10.2867L29.0256 12.0269C29.6586 12.8885 30 13.9298 30 14.9991C30 16.0683 29.6586 17.1096 29.0256 17.9712L27.7505 19.7114C27.5404 19.9983 27.4022 20.3314 27.3474 20.6828L27.0193 22.8168C26.8572 23.8733 26.3623 24.8505 25.6066 25.6063C24.8508 26.3621 23.8736 26.857 22.8172 27.0191L20.6834 27.3472C20.332 27.402 19.999 27.5403 19.7121 27.7504L17.972 29.0255C17.1104 29.6586 16.0692 30 15 30C13.9308 30 12.8896 29.6586 12.028 29.0255L10.2879 27.7504C10.001 27.5403 9.66797 27.402 9.31664 27.3472L7.18092 27.0209C6.1251 26.8586 5.14854 26.3638 4.39319 25.6084C3.63784 24.853 3.14305 23.8764 2.98074 22.8205L2.6526 20.6865C2.59781 20.3352 2.45956 20.0021 2.24946 19.7152L0.974409 17.975C0.341381 17.1133 0 16.072 0 15.0028C0 13.9336 0.341381 12.8923 0.974409 12.0306L2.24946 10.2904C2.4606 10.0041 2.59896 9.67077 2.6526 9.31909L2.98074 7.18137C3.14305 6.12548 3.63784 5.14886 4.39319 4.39347C5.14854 3.63807 6.1251 3.14325 7.18092 2.98093L9.31476 2.65277C9.6654 2.59839 9.99917 2.4615 10.2861 2.2496L12.028 0.97447ZM16.3069 3.24158C15.9277 2.96397 15.47 2.81432 15 2.81432C14.53 2.81432 14.0723 2.96397 13.6931 3.24158L11.953 4.51672C11.3005 4.99689 10.5413 5.31156 9.7404 5.43369L7.61031 5.75997C7.14509 5.83149 6.7148 6.04952 6.38197 6.38237C6.04915 6.71522 5.83113 7.14554 5.75961 7.61079L5.43335 9.74289C5.31122 10.5438 4.99658 11.3031 4.51643 11.9556L3.24138 13.6939C2.66948 14.4721 2.66948 15.5316 3.24138 16.3079L4.51643 18.0481C4.99645 18.7007 5.30959 19.4583 5.43335 20.2609L5.75961 22.3911C5.90587 23.3474 6.6559 24.0956 7.61031 24.2419L9.74228 24.5682C10.5429 24.692 11.3005 25.0051 11.9549 25.4852L13.6931 26.7603C14.4712 27.3322 15.5306 27.3322 16.3069 26.7603L18.047 25.4852C18.6995 25.005 19.4587 24.6903 20.2596 24.5682L22.3897 24.2419C23.346 24.0956 24.0941 23.3456 24.2404 22.3911L24.5667 20.259C24.6904 19.4583 25.0035 18.7007 25.4836 18.0463L26.7586 16.3079C27.3305 15.5297 27.3305 14.4703 26.7586 13.6939L25.4836 11.9537C25.0034 11.3012 24.6888 10.5419 24.5667 9.74101L24.2404 7.61079C24.1689 7.14554 23.9509 6.71522 23.618 6.38237C23.2852 6.04952 22.8549 5.83149 22.3897 5.75997L20.2577 5.43369C19.4569 5.31156 18.6976 4.99689 18.0451 4.51672L16.3069 3.24158ZM12.9749 11.4099C12.8066 11.7407 12.5162 11.9915 12.1638 12.1076C11.8114 12.2238 11.4273 12.196 11.0953 12.0303C10.7633 11.8645 10.5103 11.5742 10.3914 11.2227C10.2724 10.8712 10.2973 10.4869 10.4604 10.1536C10.7773 9.51786 11.278 8.83904 12.0524 8.32149C12.8362 7.80018 13.8168 7.50015 15 7.50015C16.1025 7.49275 17.1786 7.83766 18.0714 8.48463C19.0127 9.19158 19.6877 10.2942 19.6877 11.7193C19.6877 12.5594 19.4721 13.2758 19.0708 13.8758C18.6864 14.4515 18.1895 14.8378 17.7732 15.1172C17.5689 15.2522 17.3607 15.376 17.1863 15.4829L17.1751 15.4904C17.0102 15.5864 16.8476 15.6864 16.6876 15.7904C16.4867 15.9083 16.3109 16.0644 16.17 16.2498C15.9613 16.5557 15.6403 16.7668 15.2768 16.8375C14.9133 16.9081 14.5366 16.8325 14.2285 16.6271C13.9204 16.4216 13.7057 16.103 13.6311 15.7403C13.5565 15.3775 13.6279 15 13.83 14.6897C14.175 14.1946 14.6175 13.7727 15.1275 13.4502C15.3319 13.3133 15.54 13.1895 15.7144 13.0845L15.7275 13.077C15.915 12.9626 16.0688 12.8707 16.2113 12.7751C16.4123 12.6567 16.5887 12.5007 16.7307 12.3157C16.8001 12.2144 16.8751 12.0513 16.8751 11.7193C16.8822 11.5272 16.8409 11.3364 16.7551 11.1644C16.6693 10.9924 16.5416 10.8447 16.3838 10.7349C15.9775 10.4541 15.4939 10.3067 15 10.3129C14.3081 10.3129 13.8843 10.4817 13.6124 10.6636C13.338 10.852 13.1181 11.1095 12.9749 11.4099ZM16.8751 20.6265C16.8751 21.1239 16.6775 21.6008 16.3259 21.9525C15.9742 22.3042 15.4973 22.5017 15 22.5017C14.5027 22.5017 14.0258 22.3042 13.6741 21.9525C13.3225 21.6008 13.1249 21.1239 13.1249 20.6265C13.1249 20.1292 13.3225 19.6522 13.6741 19.3006C14.0258 18.9489 14.5027 18.7513 15 18.7513C15.4973 18.7513 15.9742 18.9489 16.3259 19.3006C16.6775 19.6522 16.8751 20.1292 16.8751 20.6265Z" fill="#DB5356"/>
                      </svg>
                    )}
            </div>
          </div>

          <div className="form-group">
            <div>
              <label htmlFor={`id_type_${index}`}>ID Type:</label>
            </div>
            <div>
              <select
                id={`id_type_${index}`}
                name="idType"
                value={attendee.idType}
                onChange={(e) => handleChange(e, index)}
              >
                <option value="Aadhar Card">Aadhar Card</option>
                <option value="Pan Card">Pan Card</option>
                <option value="College ID">College ID</option>
              </select>
              {errors.idNumber&& !idErrors && (<div className='Errors'>
						<h1>{errors.idNumber}</h1>
                     </div>)}
              
              
              
            </div>
          </div>
          </div>

          <div className="containerbox">
          <div className="genderage">
            <div className="form-group genderagediv">
              <div>
                <label htmlFor={`gender_${index}`}>Gender:</label>
              </div>
              <div>
                <select
                  id={`gender_${index}`}
                  name="gender"
                  value={attendee.gender}
                  onChange={(e) => handleChange(e, index)}
                >
                  <option value="Male">Male</option>
                  <option value="Female">Female</option>
                  <option value="Others">Other</option>
                </select>
              </div>
            </div>

            <div className="form-group genderagediv">
              <div>
                <label htmlFor={`age_${index}`}>Age:</label>
              </div>
              <div>
                <input
                  id={`age_${index}`}
                  name="age"
                  type="number"
                  onInput={(e)=>{validateAgeInput(e)}}
                  onChange={(e) => handleChange(e, index)}
                  placeholder="Age"
                  inputMode="numeric"
                  value={attendee.age}
                />
                
              </div>
            </div>
          </div>
          {errors.age&& !ageErrors && (<div className='Errors ageerror'>
						       <h1>{errors.age}</h1>
                     </div>)}

            <div className="form-group">
              <div>
                <label style={{ color: phoneErrors ? 'green' : 'red' }} htmlFor={`contact_${index}`}>Contact No:</label>
              </div>
              <div>
              <div className=" input-wrapper ">
                <input
                  style={{ border: phoneErrors ? '1px solid green' : '1px solid red' }}
                  type="text"
                  id={`contact_${index}`}
                  name="contact"
                  value={attendee.contact}
                  onInput={(e)=>{validatePhoneInput(e)}}
                  onChange={(e) => handleChange(e, index)}
                  placeholder="Enter Contact No"
                  autoComplete="off"
                />
                {phoneErrors ? (
                      <svg xmlns="http://www.w3.org/2000/svg" width="33" height="31" viewBox="0 0 33 31" fill="none">
                       <path d="M14.8771 16.5599L12.6358 14.4022C12.3525 14.1246 11.9985 13.9858 11.574 13.9858C11.1494 13.9858 10.7821 14.1372 10.4719 14.4401C10.1885 14.7177 10.0468 15.071 10.0468 15.5C10.0468 15.929 10.1885 16.2823 10.4719 16.5599L13.7951 19.8155C14.1042 20.1183 14.4649 20.2698 14.8771 20.2698C15.2892 20.2698 15.6499 20.1183 15.959 19.8155L22.5281 13.3801C22.8372 13.0773 22.9851 12.7239 22.9717 12.3202C22.9583 11.9164 22.8104 11.5631 22.5281 11.2602C22.219 10.9574 21.8521 10.7999 21.4276 10.7878C21.003 10.7757 20.6357 10.9205 20.3255 11.2224L14.8771 16.5599ZM10.5492 30.2635L8.30796 26.5537L4.05738 25.6452C3.67096 25.5695 3.36183 25.3742 3.12998 25.0592C2.89813 24.7442 2.80796 24.397 2.85948 24.0174L3.28454 19.7398L0.386417 16.4842C0.128806 16.2066 0 15.8786 0 15.5C0 15.1214 0.128806 14.7934 0.386417 14.5158L3.28454 11.2602L2.85948 6.98257C2.80796 6.60402 2.89813 6.25676 3.12998 5.9408C3.36183 5.62483 3.67096 5.4295 4.05738 5.3548L8.30796 4.44627L10.5492 0.736462C10.7553 0.408383 11.0386 0.187309 11.3993 0.0732384C11.76 -0.040832 12.1206 -0.0216521 12.4813 0.130778L16.5 1.79641L20.5187 0.130778C20.8794 -0.0206426 21.24 -0.0398225 21.6007 0.0732384C21.9614 0.186299 22.2447 0.407374 22.4508 0.736462L24.692 4.44627L28.9426 5.3548C29.329 5.43051 29.6382 5.62635 29.87 5.94231C30.1019 6.25828 30.192 6.60503 30.1405 6.98257L29.7155 11.2602L32.6136 14.5158C32.8712 14.7934 33 15.1214 33 15.5C33 15.8786 32.8712 16.2066 32.6136 16.4842L29.7155 19.7398L30.1405 24.0174C30.192 24.396 30.1019 24.7432 29.87 25.0592C29.6382 25.3752 29.329 25.5705 28.9426 25.6452L24.692 26.5537L22.4508 30.2635C22.2447 30.5916 21.9614 30.8127 21.6007 30.9268C21.24 31.0408 20.8794 31.0217 20.5187 30.8692L16.5 29.2036L12.4813 30.8692C12.1206 31.0206 11.76 31.0398 11.3993 30.9268C11.0386 30.8137 10.7553 30.5926 10.5492 30.2635Z" fill="#39A279"/>
                         </svg>
                    ) : (
                      <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 30 30" fill="none">
                      <path d="M12.028 0.97447C12.8896 0.341402 13.9308 0 15 0C16.0692 0 17.1104 0.341402 17.972 0.97447L19.7121 2.2496C19.999 2.4615 20.3309 2.59839 20.6834 2.65277L22.8172 2.98093C23.8734 3.14288 24.8503 3.63754 25.6061 4.39297C26.3618 5.1484 26.8568 6.12521 27.0193 7.18137L27.3474 9.31534C27.4018 9.666 27.5387 9.99979 27.7505 10.2867L29.0256 12.0269C29.6586 12.8885 30 13.9298 30 14.9991C30 16.0683 29.6586 17.1096 29.0256 17.9712L27.7505 19.7114C27.5404 19.9983 27.4022 20.3314 27.3474 20.6828L27.0193 22.8168C26.8572 23.8733 26.3623 24.8505 25.6066 25.6063C24.8508 26.3621 23.8736 26.857 22.8172 27.0191L20.6834 27.3472C20.332 27.402 19.999 27.5403 19.7121 27.7504L17.972 29.0255C17.1104 29.6586 16.0692 30 15 30C13.9308 30 12.8896 29.6586 12.028 29.0255L10.2879 27.7504C10.001 27.5403 9.66797 27.402 9.31664 27.3472L7.18092 27.0209C6.1251 26.8586 5.14854 26.3638 4.39319 25.6084C3.63784 24.853 3.14305 23.8764 2.98074 22.8205L2.6526 20.6865C2.59781 20.3352 2.45956 20.0021 2.24946 19.7152L0.974409 17.975C0.341381 17.1133 0 16.072 0 15.0028C0 13.9336 0.341381 12.8923 0.974409 12.0306L2.24946 10.2904C2.4606 10.0041 2.59896 9.67077 2.6526 9.31909L2.98074 7.18137C3.14305 6.12548 3.63784 5.14886 4.39319 4.39347C5.14854 3.63807 6.1251 3.14325 7.18092 2.98093L9.31476 2.65277C9.6654 2.59839 9.99917 2.4615 10.2861 2.2496L12.028 0.97447ZM16.3069 3.24158C15.9277 2.96397 15.47 2.81432 15 2.81432C14.53 2.81432 14.0723 2.96397 13.6931 3.24158L11.953 4.51672C11.3005 4.99689 10.5413 5.31156 9.7404 5.43369L7.61031 5.75997C7.14509 5.83149 6.7148 6.04952 6.38197 6.38237C6.04915 6.71522 5.83113 7.14554 5.75961 7.61079L5.43335 9.74289C5.31122 10.5438 4.99658 11.3031 4.51643 11.9556L3.24138 13.6939C2.66948 14.4721 2.66948 15.5316 3.24138 16.3079L4.51643 18.0481C4.99645 18.7007 5.30959 19.4583 5.43335 20.2609L5.75961 22.3911C5.90587 23.3474 6.6559 24.0956 7.61031 24.2419L9.74228 24.5682C10.5429 24.692 11.3005 25.0051 11.9549 25.4852L13.6931 26.7603C14.4712 27.3322 15.5306 27.3322 16.3069 26.7603L18.047 25.4852C18.6995 25.005 19.4587 24.6903 20.2596 24.5682L22.3897 24.2419C23.346 24.0956 24.0941 23.3456 24.2404 22.3911L24.5667 20.259C24.6904 19.4583 25.0035 18.7007 25.4836 18.0463L26.7586 16.3079C27.3305 15.5297 27.3305 14.4703 26.7586 13.6939L25.4836 11.9537C25.0034 11.3012 24.6888 10.5419 24.5667 9.74101L24.2404 7.61079C24.1689 7.14554 23.9509 6.71522 23.618 6.38237C23.2852 6.04952 22.8549 5.83149 22.3897 5.75997L20.2577 5.43369C19.4569 5.31156 18.6976 4.99689 18.0451 4.51672L16.3069 3.24158ZM12.9749 11.4099C12.8066 11.7407 12.5162 11.9915 12.1638 12.1076C11.8114 12.2238 11.4273 12.196 11.0953 12.0303C10.7633 11.8645 10.5103 11.5742 10.3914 11.2227C10.2724 10.8712 10.2973 10.4869 10.4604 10.1536C10.7773 9.51786 11.278 8.83904 12.0524 8.32149C12.8362 7.80018 13.8168 7.50015 15 7.50015C16.1025 7.49275 17.1786 7.83766 18.0714 8.48463C19.0127 9.19158 19.6877 10.2942 19.6877 11.7193C19.6877 12.5594 19.4721 13.2758 19.0708 13.8758C18.6864 14.4515 18.1895 14.8378 17.7732 15.1172C17.5689 15.2522 17.3607 15.376 17.1863 15.4829L17.1751 15.4904C17.0102 15.5864 16.8476 15.6864 16.6876 15.7904C16.4867 15.9083 16.3109 16.0644 16.17 16.2498C15.9613 16.5557 15.6403 16.7668 15.2768 16.8375C14.9133 16.9081 14.5366 16.8325 14.2285 16.6271C13.9204 16.4216 13.7057 16.103 13.6311 15.7403C13.5565 15.3775 13.6279 15 13.83 14.6897C14.175 14.1946 14.6175 13.7727 15.1275 13.4502C15.3319 13.3133 15.54 13.1895 15.7144 13.0845L15.7275 13.077C15.915 12.9626 16.0688 12.8707 16.2113 12.7751C16.4123 12.6567 16.5887 12.5007 16.7307 12.3157C16.8001 12.2144 16.8751 12.0513 16.8751 11.7193C16.8822 11.5272 16.8409 11.3364 16.7551 11.1644C16.6693 10.9924 16.5416 10.8447 16.3838 10.7349C15.9775 10.4541 15.4939 10.3067 15 10.3129C14.3081 10.3129 13.8843 10.4817 13.6124 10.6636C13.338 10.852 13.1181 11.1095 12.9749 11.4099ZM16.8751 20.6265C16.8751 21.1239 16.6775 21.6008 16.3259 21.9525C15.9742 22.3042 15.4973 22.5017 15 22.5017C14.5027 22.5017 14.0258 22.3042 13.6741 21.9525C13.3225 21.6008 13.1249 21.1239 13.1249 20.6265C13.1249 20.1292 13.3225 19.6522 13.6741 19.3006C14.0258 18.9489 14.5027 18.7513 15 18.7513C15.4973 18.7513 15.9742 18.9489 16.3259 19.3006C16.6775 19.6522 16.8751 20.1292 16.8751 20.6265Z" fill="#DB5356"/>
                      </svg>
                    )}
                    </div>
                    {errors.contact&& !phoneErrors && (<div className='Errors'>
                  <h1>{errors.contact}</h1>
                           </div>)}
              </div>
            </div>

            <div className="form-group">
              <div>
                <label htmlFor={`id_number_${index}`}>ID Number:</label>
              </div>
              <div>
                <div>
                <input
                  type="text"
                  id={`id_number_${index}`}
                  name="idNumber"
                  value={attendee.idNumber}
                  onInput={(e)=>{validateIDInput(e)}}
                  onChange={(e) => handleChange(e, index)}
                  placeholder="Enter ID Number"
                />
                {errors.idNumber&& !idErrors && (<div className='Errors'>
						<h1>{errors.idNumber}</h1>
                     </div>)}
                </div>      
              </div>
            </div>
          </div>
          </div>
      </div>
    </>
  );
};

export default Attendee;
